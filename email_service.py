import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EmailService:
    def __init__(self):
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render)
        self.smtp_username = os.environ.get("GMAIL_USERNAME")
        self.smtp_password = os.environ.get("GMAIL_APP_PASSWORD")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –∏–∑ .env —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if not self.smtp_username or not self.smtp_password:
            try:
                from dotenv import load_dotenv
                load_dotenv()
                self.smtp_username = os.environ.get("GMAIL_USERNAME")
                self.smtp_password = os.environ.get("GMAIL_APP_PASSWORD")
            except ImportError:
                pass  # dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

        if not self.smtp_username or not self.smtp_password:
            logger.warning("‚ö†Ô∏è Gmail credentials not found")
            logger.warning("‚ö†Ô∏è Email sending will be disabled")
            self.enabled = False
        else:
            self.enabled = True
            logger.info("‚úÖ Email service initialized successfully")
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            self._test_connection()

    def _test_connection(self):
        """Test SMTP server connection"""
        if not self.enabled:
            logger.warning("‚ö†Ô∏è Email service disabled, skipping connection test")
            return False

        try:
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.ehlo()
                server.starttls()
                server.ehlo()
                server.login(self.smtp_username, self.smtp_password)
            logger.info("‚úÖ SMTP connection test successful")
            return True
        except Exception as e:
            logger.error(f"‚ùå SMTP connection test failed: {str(e)}")
            return False

    def format_seats(self, seat_ids):
        """Format seat list nicely: 1,2,3,10,11,12"""
        if not seat_ids:
            return ""

        seat_ids = sorted(seat_ids)
        ranges = []
        start = seat_ids[0]
        end = seat_ids[0]

        for seat in seat_ids[1:]:
            if seat == end + 1:
                end = seat
            else:
                if start == end:
                    ranges.append(str(start))
                else:
                    ranges.append(f"{start}-{end}")
                start = end = seat

        if start == end:
            ranges.append(str(start))
        else:
            ranges.append(f"{start}-{end}")

        return ", ".join(ranges)

    def send_booking_confirmation(self, to_email: str, movie_title: str, seat_ids: list):
        """Send booking confirmation email - –°–ò–ù–•–†–û–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è"""
        if not self.enabled:
            logger.info(f"üìß Email sending disabled. Would send to {to_email}: {movie_title} - seats {seat_ids}")
            return {"success": True, "message": "Email simulation"}

        try:
            seats_str = self.format_seats(seat_ids)

            msg = MIMEMultipart('alternative')
            msg['From'] = f"–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä <{self.smtp_username}>"
            msg['To'] = to_email
            msg['Subject'] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ"

            html_content = f"""
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <style>
                    body {{ font-family: Arial, sans-serif; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; }}
                    .header {{ background: #ff6b6b; color: white; padding: 20px; text-align: center; }}
                    .content {{ padding: 20px; }}
                    .details {{ background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; }}
                    .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üé¨ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</h1>
                    </div>
                    <div class="content">
                        <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—à–µ–º –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ!</p>
                        <div class="details">
                            <h3>üìã –î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
                            <p><strong>–§–∏–ª—å–º:</strong> {movie_title}</p>
                            <p><strong>–ú–µ—Å—Ç–∞:</strong> {seats_str}</p>
                            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:</strong> {len(seat_ids)}</p>
                            <p><strong>Email:</strong> {to_email}</p>
                        </div>
                        <p><strong>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–∞: {seats_str} –Ω–∞ —Ñ–∏–ª—å–º "{movie_title}"</strong></p>
                        <p>–ñ–¥–µ–º –≤–∞—Å –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ!</p>
                    </div>
                    <div class="footer">
                        <p>–≠—Ç–æ –ø–∏—Å—å–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
                    </div>
                </div>
            </body>
            </html>
            """

            msg.attach(MIMEText(html_content, 'html', 'utf-8'))

            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.ehlo()
                server.starttls()
                server.ehlo()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)

            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email} –¥–ª—è –º–µ—Å—Ç {seats_str}")
            return {"success": True, "message": "Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

        except smtplib.SMTPAuthenticationError as e:
            error_msg = "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Gmail. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            logger.error(f"‚ùå {error_msg}: {str(e)}")
            return {"success": False, "message": error_msg}
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {"success": False, "message": error_msg}

    async def send_all_bookings(self, to_email: str, bookings_data: list):
        """Send all user bookings to email - –æ—Å—Ç–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–ª—è endpoint"""
        if not self.enabled:
            logger.info(f"üìß Email sending disabled. Would send all bookings to {to_email}")
            return {"success": True, "message": "Email simulation"}

        try:
            msg = MIMEMultipart('alternative')
            msg['From'] = f"–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä <{self.smtp_username}>"
            msg['To'] = to_email
            msg['Subject'] = "üéüÔ∏è –í—Å–µ –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ"

            bookings_html = ""
            for booking in bookings_data:
                seats_str = self.format_seats(booking['seat_ids'])
                bookings_html += f"""
                <div style="background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 8px;">
                    <h4>üé¨ {booking['movie_title']}</h4>
                    <p><strong>–ú–µ—Å—Ç–∞:</strong> {seats_str}</p>
                    <p><strong>–î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> {booking['booking_date']}</p>
                </div>
                """

            html_content = f"""
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <style>
                    body {{ font-family: Arial, sans-serif; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; }}
                    .header {{ background: #4ecdc4; color: white; padding: 20px; text-align: center; }}
                    .content {{ padding: 20px; }}
                    .footer {{ text-align: center; padding: 20px; color: #666; font-size: 12px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>üéüÔ∏è –í—Å–µ –≤–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
                    </div>
                    <div class="content">
                        <p>–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç, –≤–æ—Ç –≤—Å–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</p>
                        {bookings_html}
                        <p>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—à –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä!</p>
                    </div>
                    <div class="footer">
                        <p>–≠—Ç–æ –ø–∏—Å—å–º–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
                    </div>
                </div>
            </body>
            </html>
            """

            msg.attach(MIMEText(html_content, 'html', 'utf-8'))

            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.smtp_username, self.smtp_password)
                server.send_message(msg)

            logger.info(f"‚úÖ –í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {to_email}")
            return {"success": True, "message": "–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email"}

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            return {"success": False, "message": error_msg}

# Create global instance
email_service = EmailService()